buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
        classpath "org.spongepowered:mixingradle:0.7.+"
    }
}

plugins {
    id("platform-conventions")
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"

// This node shouldn"t be needed, temp fix
// for forge maven repo move issues.
repositories {
    maven { url = "https://libraries.minecraft.net/" }
    maven { url = "https://maven.minecraftforge.net/" }
    maven { url = "https://maven.enginehub.org/repo/" }
}

minecraft {
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "official", version: "1.17.1"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file("run")
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=otg.mixins.json"

            mods {
                openterraingenerator {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=otg.mixins.json"

            mods {
                openterraingenerator {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            property "mixin.env.remapRefMap", "true"
            property "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"
            args "--mod", "openterraingenerator", "--all", "--output", file("src/generated/resources/")

            arg "-mixin.config=otg.mixins.json"

            mods {
                openterraingenerator {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft('net.minecraftforge:forge:1.17.1-37.0.126')

    annotationProcessor("org.spongepowered:mixin:0.8.4:processor")

    implementation(project(":common:common-core"))

    compileOnly("com.sk89q.worldedit:worldedit-core:7.2.7") {
        exclude group: "org.yaml"
    }

    // We may not need this, remove if so
    compileOnly(fg.deobf("com.sk89q.worldedit:worldedit-forge-mc1.17.1:7.2.7"))
}

tasks {
    processResources {
        def replacements = [
                "version": project.version
        ]
        inputs.properties(replacements)

        filesMatching("META-INF/mods.toml") {
            expand(replacements)
        }
    }

    jar {
        manifest {
            attributes([
                    "MixinConfigs": "otg.mixins.json"
            ])
        }
    }
}

afterEvaluate {
    tasks.reobfJar {
        input.set(shadowJar.archiveFile)
    }
}
shadowJar.finalizedBy("reobfJar")

otgPlatform {
    productionJar.set(shadowJar.archiveFile)
}

// Example configuration to allow publishing using the maven-publish task
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

mixin {
    add sourceSets.main, "otg.refmap.json"
}

if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}
